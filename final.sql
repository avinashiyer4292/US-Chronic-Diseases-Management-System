--query no. 1  - index.html (input: state,disease,year,race)

create or replace PROCEDURE SP_GET_STATE_DATA_BY_RDY 
(
  STATE_ID IN VARCHAR2 
, DISEASEDETAIL IN VARCHAR2 
, YEAR_VALUE IN VARCHAR2 
, STRATIFICATION_TYPE IN VARCHAR2
, AVGDATAVALUE OUT NUMBER
, AVGLOWLIMIT OUT NUMBER
, AVGHIGHLIMIT OUT NUMBER
) IS 
BEGIN
    
    SELECT ROUND(AVG(AD.DATAVALUE),2),
           ROUND(AVG(AD.LOWCONFIDENCELIMIT),2),
           ROUND(AVG(AD.HIGHCONFIDENCELIMIT),2) INTO AVGDATAVALUE, AVGLOWLIMIT,AVGHIGHLIMIT
    FROM AGGREGATEDATA AD, DISEASE D, STRATIFICATION S
    WHERE (AD.STATEID=STATE_ID
    AND AD.STRATIFICATIONID= S.STRATIFICATIONID 
    AND S.STRATIFICATIONTYPE = STRATIFICATION_TYPE
    AND AD.YEARVALUE = YEAR_VALUE
    AND AD.DATAVALUEUNIT='%')
    AND AD.DISEASEID=D.DISEASEID 
    AND D.DISEASE_DETAIL=DISEASEDETAIL;
END SP_GET_STATE_DATA_BY_RDY;




-- query no. 2 - disease.html (input: 2 states and filter)

create or replace PROCEDURE SP_GET_PREV_DOAGS 
(
  STATE_NAME IN VARCHAR2
, QUESTION_DATA IN VARCHAR2
, AVGDATAVALUE OUT NUMBER
) AS
BEGIN
SELECT KT.AVGVALUE INTO AVGDATAVALUE FROM 
(SELECT DT.AKSTATEID AS STATEID, ROUND(AVG(DT.AKDATAVALUE),2) AS AVGVALUE
FROM 
(SELECT AK.YEARVALUE AS AKYEAR, SUM(AK.DATAVALUE) AS AKDATAVALUE, AK.STATEID AS AKSTATEID
FROM AGGREGATEDATA AK
WHERE (AK.QUESTIONID IN (SELECT QUESTIONID FROM FILTER WHERE QUESTION=QUESTION_DATA) AND 
AK.STRATIFICATIONID = 'OVR' AND 
DATAVALUEUNIT='%' AND 
(AK.YEARVALUE IN (SELECT UNIQUE(YEARVALUE) FROM AGGREGATEDATA)))
GROUP BY AK.YEARVALUE,AK.STATEID
HAVING AK.YEARVALUE>2011 AND AK.YEARVALUE<2015 
ORDER BY AKYEAR,AKDATAVALUE DESC) DT
GROUP BY DT.AKSTATEID
ORDER BY AVGVALUE DESC)KT
WHERE STATEID IN (SELECT STATEID FROM LOCATION WHERE STATE LIKE STATE_NAME);
END SP_GET_PREV_DOAGS;




--query no. 3 - disease.html (input: state)

create or replace PROCEDURE SP_GET_LOW_HIGH 
(
  STATE_NAME IN VARCHAR2
, HIGHVAL OUT NUMBER
, LOWVAL OUT NUMBER
)AS 
BEGIN

SELECT AVG(DT.LOWCONFIDENCELIMIT)AS LOWERLIMIT,AVG(DT.HIGHCONFIDENCELIMIT)AS HIGHERLIMIT INTO LOWVAL,HIGHVAL
FROM
(select AG.YEARVALUE,L.STATEID,AG.DATAVALUETYPEID,AG.STRATIFICATIONID,F.QUESTIONID,AG.LOWCONFIDENCELIMIT,AG.HIGHCONFIDENCELIMIT 
from Location L, AGGREGATEDATA AG, FILTER F, STRATIFICATION S 
where L.STATEID = AG.STATEID AND AG.QUESTIONID = F.QUESTIONID AND S.STRATIFICATIONID = AG.STRATIFICATIONID AND
AG.DISEASEID = 'DIA'AND L.STATEID IN (SELECT STATEID FROM LOCATION WHERE STATE =STATE_NAME) AND AG.YEARVALUE =2013 AND AG.DATAVALUEUNIT= '%' 
AND s.STRATIFICATIONID IN ('GENM') AND AG.QUESTIONID = 'DIA10_0'
UNION
select AG.YEARVALUE,L.STATEID,AG.DATAVALUETYPEID,AG.STRATIFICATIONID,F.QUESTIONID,AG.LOWCONFIDENCELIMIT,AG.HIGHCONFIDENCELIMIT 
from Location L, AGGREGATEDATA AG, FILTER F, STRATIFICATION S 
where L.STATEID = AG.STATEID AND AG.QUESTIONID = F.QUESTIONID AND S.STRATIFICATIONID = AG.STRATIFICATIONID AND
AG.DISEASEID = 'DIA'AND L.STATEID IN (SELECT STATEID FROM LOCATION WHERE STATE =STATE_NAME) AND AG.YEARVALUE =2013 AND AG.DATAVALUEUNIT= '%' 
AND s.STRATIFICATIONID IN ('GENF') AND AG.QUESTIONID = 'DIA10_0') DT;

END SP_GET_LOW_HIGH;


--query no. 4 - user view (input : disease and question)
create or replace PACKAGE BODY PACKAGE5 AS
FUNCTION F_GET_ACROSS(DISEASE_NAME IN VARCHAR2, QUESTION_DETAIL IN VARCHAR2) RETURN OUTRECSET PIPELINED IS

CURSOR C1 IS 

SELECT L.STATEID, DT1.AVERAGE FROM
(SELECT DT.STATEID,ROUND(AVG(DT.DATAVALUE),2) AS AVERAGE
FROM(SELECT * FROM AGGREGATEDATA
WHERE DISEASEID =(SELECT DISEASEID FROM DISEASE WHERE DISEASE_DETAIL=DISEASE_NAME) 
AND QUESTIONID = (SELECT Q.QUESTIONID FROM FILTER Q WHERE Q.QUESTION = QUESTION_DETAIL) AND STRATIFICATIONID = 'OVR'
AND DATAVALUETYPEID = 'CrdPrev' 
AND YEARVALUE IN (SELECT UNIQUE(YEARVALUE) FROM  AGGREGATEDATA WHERE YEARVALUE >2011)
ORDER BY DATAVALUE  DESC) DT
GROUP BY DT.STATEID
ORDER BY AVERAGE DESC ) DT1,LOCATION L
WHERE DT1.STATEID = L.STATEID AND ROWNUM<6;

outrec_1 outrec_typ;
BEGIN 
OPEN C1;
LOOP
FETCH C1 INTO outrec_1;
EXIT WHEN C1%NOTFOUND;
PIPE ROW (outrec_1);
END LOOP;
RETURN;
END F_GET_ACROSS;
END PACKAGE5;



--query no. 6 - index view (input: state) (used directly in routes.js - hardcoded)
SELECT S.STRATIFICATIONTYPE,((DT1.DIFF*100)+10000) AS FUNDINGNEEDED FROM
(SELECT DT.SID ,SUM(DT.DT_2014-DT.DT_2013)AS DIFF FROM 
(SELECT * FROM
(SELECT AD.YEARVALUE,AD.STRATIFICATIONID AS SID,AD.QUESTIONID AS QD_2014,AD.DATAVALUE AS DT_2014
FROM AGGREGATEDATA AD
WHERE AD.YEARVALUE IN (2014)
AND AD.STATEID='CA'
AND AD.DISEASEID = 'CKD' 
AND AD.DATAVALUETYPEID= 'CrdPrev')T1
INNER JOIN 
(SELECT AD.YEARVALUE,AD.STRATIFICATIONID AS SID,AD.DATAVALUE AS DT_2013,AD.QUESTIONID AS QD_2013
FROM AGGREGATEDATA AD
WHERE AD.YEARVALUE IN (2013)
AND AD.STATEID='CA'
AND AD.DISEASEID = 'CKD' 
AND AD.DATAVALUETYPEID= 'CrdPrev')T2
USING (SID))DT
WHERE DT.QD_2014 = DT.QD_2013
GROUP BY (SID))DT1, STRATIFICATION S
WHERE DT1.SID = S.STRATIFICATIONID;



--query no.7  - index.html ( input:state and year)

create or replace PACKAGE BODY PACKAGE3 AS
FUNCTION F_GET_LEAST_COM(STATE_ID IN VARCHAR2, YEARR IN NUMBER) RETURN OUTRECSET PIPELINED IS

CURSOR C1 IS 
(SELECT D.DISEASE_DETAIL, DATAVALUE FROM
(SELECT DT1.DISEASEID AS DIESE,DT1.DATAVALUE,F.QUESTION AS LEAST_COMMON FROM
(SELECT DT.DISEASEID,DT.QUESTIONID,DT.DATAVALUE,DT.STRATIFICATIONID FROM
(SELECT * FROM AGGREGATEDATA AG
WHERE AG.STATEID =STATE_ID AND AG.DATAVALUETYPEID='CrdPrev' AND AG.DATAVALUEUNIT = '%' AND
AG.QUESTIONID  IN(SELECT QUESTIONID FROM FILTER WHERE QUESTION LIKE '%>= 18%'  )AND AG.YEARVALUE=YEARR)DT
WHERE DT.STRATIFICATIONID = 'OVR')DT1, FILTER F
WHERE F.QUESTIONID = DT1.QUESTIONID 
ORDER BY TO_NUMBER(DT1.DATAVALUE)), DISEASE D
WHERE ROWNUM<4 AND D.DISEASEID=DIESE);
  
outrec_1 outrec_typ;
BEGIN 
OPEN C1;
LOOP
FETCH C1 INTO outrec_1;
EXIT WHEN C1%NOTFOUND;
PIPE ROW (outrec_1);
END LOOP;
RETURN;
END F_GET_LEAST_COM;
END PACKAGE3;



-- query no. 8 - user view (input: Race and disease)
create or replace PACKAGE BODY PACKAGE4 AS
FUNCTION F_PROLOSS(DISEASEDETAIL IN VARCHAR2, STTYPE IN VARCHAR2) RETURN OUTRECSET PIPELINED IS

CURSOR C1 IS 
(SELECT DT2.STATEID,SUM(INCOME) AS PROFIT_LOSS FROM
(SELECT DT1.STATEID,DT1.DISEASE,DT1.Q AS SUBTYPES,DT1.DIFF,((DT1.DIFF*100)) AS INCOME FROM
(SELECT DT.STATEID,DT.DISEASE,DT.Q,DT.DATAVALUE-DT.DATAVALUE_2013 AS DIFF FROM 
(SELECT T1.STATEID,DISEASE,T1.DATAVALUE,T1.QUESTIONID AS Q ,T2.DATAVALUE AS DATAVALUE_2013,T2.QUESTIONID AS QUESTIONID_2013 FROM
(SELECT AD.STATEID ,AD.YEARVALUE ,AD.STRATIFICATIONID ,AD.DATAVALUE,AD.DISEASEID AS DISEASE,AD.QUESTIONID
FROM AGGREGATEDATA AD
WHERE AD.YEARVALUE IN (2014)
AND AD.DISEASEID IN (SELECT DISEASEID FROM DISEASE WHERE DISEASE_DETAIL=DISEASEDETAIL) 
AND AD.DATAVALUETYPEID= 'CrdPrev'
AND AD.STRATIFICATIONID= (SELECT STRATIFICATIONID FROM STRATIFICATION WHERE STRATIFICATIONTYPE LIKE STTYPE))T1
INNER JOIN
(SELECT AD.STATEID ,AD.YEARVALUE,AD.STRATIFICATIONID,AD.DATAVALUE,AD.DISEASEID AS DISEASE,AD.QUESTIONID
FROM AGGREGATEDATA AD
WHERE AD.YEARVALUE IN (2013)
AND AD.DISEASEID  IN (SELECT DISEASEID FROM DISEASE WHERE DISEASE_DETAIL=DISEASEDETAIL)
AND AD.DATAVALUETYPEID= 'CrdPrev'
AND AD.STRATIFICATIONID= (SELECT STRATIFICATIONID FROM STRATIFICATION WHERE STRATIFICATIONTYPE LIKE STTYPE))T2
USING (DISEASE))DT
WHERE DT.Q = DT.QUESTIONID_2013)DT1)DT2
GROUP BY STATEID);

outrec_1 outrec_typ;
BEGIN 
OPEN C1;
LOOP
FETCH C1 INTO outrec_1;
EXIT WHEN C1%NOTFOUND;
PIPE ROW (outrec_1);
END LOOP;
RETURN;
END F_PROLOSS;
END PACKAGE4;